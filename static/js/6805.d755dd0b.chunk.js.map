{"version":3,"file":"static/js/6805.d755dd0b.chunk.js","mappings":";2QAOMA,EAAY,WAChB,OAA0BC,EAAAA,EAAAA,UAAS,sBAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAMC,EAAAA,EAAAA,aAUZ,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAKH,EAAII,QAAQC,WAAWC,WAC5BC,EAAWC,OACdC,iBAAiBN,GACjBO,iBAAiB,oBACpBX,EAASQ,EACV,GAAE,CAACP,KAGF,kBAAOW,UAAU,cAAcX,IAAKA,EAApC,UACE,8BACE,2BACE,eAAIW,UAAU,uBAAd,mBACA,eAAIA,UAAU,mBAAd,UAAkCC,EAAAA,EAAAA,UAASd,SAE7C,2BACE,eAAIa,UAAU,uBAAd,mBACA,eAAIA,UAAU,mBAAd,SAAkCb,WAK3C,EAEKe,EAAa,SAAC,GAA6B,IAA3BF,EAA0B,EAA1BA,UAAWG,EAAe,EAAfA,SACzBC,EAAUC,IAAWL,EAAW,iCACtC,OACE,UAAC,KAAD,CAAMM,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGT,UAAU,OAA7C,WACE,gBAAKA,UAAWI,EAASM,MAAO,CAAEC,WAAY,SAC7CR,GACD,SAAClB,EAAD,MAGL,EAgDD,UAzCe,WACb,OACE,+BACE,UAAC,KAAD,CAAOe,UAAU,OAAjB,WACE,UAAC,KAAD,2BAEE,SAAC,KAAD,CAAUY,KAAK,iDAEjB,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAACV,EAAD,CAAYF,UAAU,aAAtB,UACE,mDAEF,SAACE,EAAD,CAAYF,UAAU,eAAtB,UACE,qDAEF,SAACE,EAAD,CAAYF,UAAU,aAAtB,UACE,mDAEF,SAACE,EAAD,CAAYF,UAAU,YAAtB,UACE,kDAEF,SAACE,EAAD,CAAYF,UAAU,aAAtB,UACE,mDAEF,SAACE,EAAD,CAAYF,UAAU,UAAtB,UACE,gDAEF,SAACE,EAAD,CAAYF,UAAU,WAAtB,UACE,iDAEF,SAACE,EAAD,CAAYF,UAAU,UAAtB,UACE,wDAOb,uBC1FD,OAOC,WACA,aAEA,IAAIa,EAAS,CAAC,EAAEC,eAGhB,SAAST,IAGR,IAFA,IAAID,EAAU,GAELW,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAC1C,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CAEA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC3Bf,EAAQgB,KAAKF,QACP,GAAIG,MAAMC,QAAQJ,IACxB,GAAIA,EAAID,OAAQ,CACf,IAAIM,EAAQlB,EAAWmB,MAAM,KAAMN,GAC/BK,GACHnB,EAAQgB,KAAKG,EAEd,OACK,GAAgB,WAAZJ,EAAsB,CAChC,GAAID,EAAIO,WAAaC,OAAOC,UAAUF,WAAaP,EAAIO,SAASA,WAAWG,SAAS,iBAAkB,CACrGxB,EAAQgB,KAAKF,EAAIO,YACjB,QACA,CAED,IAAK,IAAII,KAAOX,EACXL,EAAOiB,KAAKZ,EAAKW,IAAQX,EAAIW,IAChCzB,EAAQgB,KAAKS,EAGf,CAxBiB,CAyBlB,CAED,OAAOzB,EAAQ2B,KAAK,IACpB,CAEoCC,EAAOC,SAC3C5B,EAAW6B,QAAU7B,EACrB2B,EAAOC,QAAU5B,QAGX,kBACL,OAAOA,CADF,UAAe,OAAf,YA9CP","sources":["views/theme/colors/Colors.js","../node_modules/classnames/index.js"],"sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useEffect, useState, createRef } from 'react'\nimport classNames from 'classnames'\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from '@coreui/react'\nimport { rgbToHex } from '@coreui/utils'\nimport { DocsLink } from 'src/components'\n\nconst ThemeView = () => {\n  const [color, setColor] = useState('rgb(255, 255, 255)')\n  const ref = createRef()\n\n  useEffect(() => {\n    const el = ref.current.parentNode.firstChild\n    const varColor = window\n      .getComputedStyle(el)\n      .getPropertyValue('background-color')\n    setColor(varColor)\n  }, [ref])\n\n  return (\n    <table className=\"table w-100\" ref={ref}>\n      <tbody>\n        <tr>\n          <td className=\"text-medium-emphasis\">HEX:</td>\n          <td className=\"font-weight-bold\">{rgbToHex(color)}</td>\n        </tr>\n        <tr>\n          <td className=\"text-medium-emphasis\">RGB:</td>\n          <td className=\"font-weight-bold\">{color}</td>\n        </tr>\n      </tbody>\n    </table>\n  )\n}\n\nconst ThemeColor = ({ className, children }) => {\n  const classes = classNames(className, 'theme-color w-75 rounded mb-3')\n  return (\n    <CCol xs={12} sm={6} md={4} xl={2} className=\"mb-4\">\n      <div className={classes} style={{ paddingTop: '75%' }}></div>\n      {children}\n      <ThemeView />\n    </CCol>\n  )\n}\n\nThemeColor.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nconst Colors = () => {\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardHeader>\n          Theme colors\n          <DocsLink href=\"https://coreui.io/docs/utilities/colors/\" />\n        </CCardHeader>\n        <CCardBody>\n          <CRow>\n            <ThemeColor className=\"bg-primary\">\n              <h6>Brand Primary Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-secondary\">\n              <h6>Brand Secondary Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-success\">\n              <h6>Brand Success Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-danger\">\n              <h6>Brand Danger Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-warning\">\n              <h6>Brand Warning Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-info\">\n              <h6>Brand Info Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-light\">\n              <h6>Brand Light Color</h6>\n            </ThemeColor>\n            <ThemeColor className=\"bg-dark\">\n              <h6>Brand Dark Color</h6>\n            </ThemeColor>\n          </CRow>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default Colors\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"],"names":["ThemeView","useState","color","setColor","ref","createRef","useEffect","el","current","parentNode","firstChild","varColor","window","getComputedStyle","getPropertyValue","className","rgbToHex","ThemeColor","children","classes","classNames","xs","sm","md","xl","style","paddingTop","href","hasOwn","hasOwnProperty","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default"],"sourceRoot":""}